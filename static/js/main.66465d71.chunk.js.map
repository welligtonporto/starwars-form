{"version":3,"sources":["imgs/starwars-logo.svg","imgs/characters/vader.svg","imgs/characters/empire.svg","imgs/characters/kenobi.svg","imgs/characters/maul.svg","imgs/characters/skywalker.svg","imgs/characters/yoda.svg","imgs/characters/index.js","util/firebaseUtils.js","models/UserModel.js","models/CharactersModel.js","components/Main/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","vader","require","empire","kenobi","maul","skywalker","yoda","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","setUserInfo","a","name","gender","sideForce","character","database","ref","child","push","key","newPostKey","set","getUserInfo","id","once","response","val","getCharacters","Main","useState","userForm","setUserForm","registeredUser","setRegisteredUser","allCharacters","setAllCharacters","step","setStep","useEffect","characters","getCharactersFromApi","userId","getUser","handleSubmit","handleChangeUserForm","value","prevState","className","type","placeholder","onChange","event","target","onClick","filter","item","map","src","imgCharacters","slug","alt","App","href","rel","starwarsLogo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.66465d71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/starwars-logo.be343f8e.svg\";","module.exports = __webpack_public_path__ + \"static/media/vader.dbc8903d.svg\";","module.exports = __webpack_public_path__ + \"static/media/empire.9fbe3215.svg\";","module.exports = __webpack_public_path__ + \"static/media/kenobi.974cc90a.svg\";","module.exports = __webpack_public_path__ + \"static/media/maul.0bd04385.svg\";","module.exports = __webpack_public_path__ + \"static/media/skywalker.7b435b3c.svg\";","module.exports = __webpack_public_path__ + \"static/media/yoda.0b67eecc.svg\";","export const vader = require('./vader.svg');\r\nexport const empire = require('./empire.svg');\r\nexport const kenobi = require('./kenobi.svg');\r\nexport const maul = require('./maul.svg');\r\nexport const skywalker = require('./skywalker.svg');\r\nexport const yoda = require('./yoda.svg');","import firebase from 'firebase';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyDwVtyoWHVHOTJUOsRhNGCyw580ssgdOYU\",\r\n  authDomain: \"starwars-form.firebaseapp.com\",\r\n  databaseURL: \"https://starwars-form.firebaseio.com\",\r\n  projectId: \"starwars-form\",\r\n  storageBucket: \"starwars-form.appspot.com\",\r\n  messagingSenderId: \"52181277620\",\r\n  appId: \"1:52181277620:web:a9cf51c61652f02c0db0e1\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import firebase from './../util/firebaseUtils.js';\r\n\r\nexport const setUserInfo = async ({ name, gender, sideForce, character }) => {\r\n  const newPostKey = await firebase.database().ref().child('users').push().key;\r\n  await firebase.database().ref(`users/${newPostKey}`).set({\r\n    name,\r\n    gender,\r\n    sideForce,\r\n    character\r\n  });\r\n\r\n  return newPostKey;\r\n};\r\n\r\nexport const getUserInfo = async (id) => {\r\n  const response = await firebase.database().ref(`users/${id}`).once('value');\r\n  return response.val();\r\n};","import firebase from './../util/firebaseUtils.js';\r\n\r\nexport const getCharacters = async () => {\r\n  const response = await firebase.database().ref(\"/characters\").once('value');\r\n  return response.val();\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport * as imgCharacters from '../../imgs/characters';\r\nimport \"./styles.scss\";\r\nimport { setUserInfo, getUserInfo } from './../../models/UserModel';\r\nimport { getCharacters } from './../../models/CharactersModel';\r\n\r\nexport function Main() {\r\n  const [userForm, setUserForm] = useState({\r\n    \"name\": \"\",\r\n    \"gender\": \"\",\r\n    \"sideForce\": \"\",\r\n    \"character\": \"\",\r\n  });\r\n  const [registeredUser, setRegisteredUser] = useState({});\r\n  const [allCharacters, setAllCharacters] = useState([]);\r\n  const [step, setStep] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const getCharactersFromApi = async () => {\r\n      const characters = await getCharacters();\r\n      setAllCharacters(characters);\r\n    };\r\n\r\n    getCharactersFromApi();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!userForm.character) return;\r\n\r\n    const handleSubmit = async () => {\r\n      const userId = await setUserInfo({ ...userForm });\r\n      getUser(userId);\r\n    };\r\n\r\n    handleSubmit();\r\n  }, [userForm]);\r\n \r\n  const getUser = async (id) => {\r\n    const response = await getUserInfo(id);\r\n\r\n    setRegisteredUser({\r\n      id,\r\n      ...response\r\n    });\r\n  };\r\n\r\n  const handleChangeUserForm = (key, value) => {\r\n    setUserForm(prevState => ({\r\n      ...prevState,\r\n      [key]: value\r\n    }));\r\n\r\n    if (key !== \"name\") setStep(prevState => prevState + 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"global\">\r\n      <form className=\"form\">\r\n        {!step && (\r\n          <>\r\n            <label className=\"label\">\r\n              <span className=\"labelText\">Qual o seu nome?</span>\r\n              <input className=\"defaultInput\" type=\"text\" placeholder=\"Seu nome\" value={userForm.name} onChange={(event) => handleChangeUserForm(\"name\", event.target.value)} />\r\n            </label>\r\n\r\n            <button type=\"button\" className={`defaultButton ${userForm.name ? 'active' : ''}`} onClick={() => setStep(1)}>\r\n              OK\r\n            </button>\r\n          </>\r\n        )}\r\n\r\n        {step === 1 && (\r\n          <>\r\n            <span className=\"labelText\">Qual o seu gênero?</span>\r\n\r\n            <div>\r\n              <button type=\"button\" className=\"defaultButton active\" onClick={() => handleChangeUserForm(\"gender\", \"male\")}>\r\n                HOMEM\r\n              </button>\r\n\r\n              <button type=\"button\" className=\"defaultButton active\" onClick={() => handleChangeUserForm(\"gender\", \"female\")}>\r\n                MULHER\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {step === 2 && (\r\n          <>\r\n            <span className=\"labelText\">Qual o lado da força você escolhe?</span>\r\n\r\n            <div>\r\n              <button type=\"button\" className=\"defaultButton active jedi\" onClick={() => handleChangeUserForm(\"sideForce\", \"jedi\")}>\r\n                JEDI\r\n              </button>\r\n\r\n              <button type=\"button\" className=\"defaultButton active sith\" onClick={() => handleChangeUserForm(\"sideForce\", \"sith\")}>\r\n                SITH\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {step === 3 && (\r\n          <>\r\n            <span className=\"labelText\">Escolha o seu personagem:</span>\r\n\r\n            <ul className=\"globalCharacters\">\r\n              {allCharacters.filter(item => item.sideForce === userForm.sideForce).map(character => (\r\n                <li key={character.id} className=\"characterItem\" onClick={() => handleChangeUserForm(\"character\", character.id)}>\r\n                  <div className=\"globalCharacterImage\">\r\n                    <img src={imgCharacters[character.slug]} alt={character.name} />\r\n                  </div>\r\n\r\n                  <span className=\"characterName\">{character.name}</span>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </>\r\n        )}\r\n\r\n        {step === 4 && registeredUser.id && (\r\n          <>\r\n            <img src={imgCharacters[allCharacters[registeredUser.character].slug]} alt={allCharacters[registeredUser.character].name} />\r\n\r\n            <span className=\"welcome\">Bem-vindo, <strong>{registeredUser.name}</strong></span>\r\n          </>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n};","import React from \"react\";\nimport \"./styles.scss\";\nimport { Main } from \"../Main\";\nimport starwarsLogo from './../../imgs/starwars-logo.svg';\n\nexport function App() {\n  return (\n    <>\n      <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;700&display=swap\" rel=\"stylesheet\" />\n      \n      <h1>\n        <img className=\"logo\" src={starwarsLogo} alt=\"Star Wars\" />\n      </h1>\n\n      <Main />\n    </>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}